{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "", "title": "Miikka's Blog", "subTitle": "This is my blog, I will post some interesting articles including tutorials and reviews.", "avatarUrl": "https://avatars.githubusercontent.com/u/91852814?v=4", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/test.html", "labels": ["testing"], "postTitle": "test", "postUrl": "post/test.html", "postSourceUrl": "https://github.com/Miikka11213/miikka.github.io/issues/1", "commentNum": 0, "wordCount": 31, "description": "this is the testing issues part\u3002", "top": 0, "createdAt": 1718814887, "style": "", "script": "", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/91852814?v=4", "createdDate": "2024-06-20", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/Some information about this project....html", "labels": ["documentation"], "postTitle": "Some information about this project...", "postUrl": "post/Some%20information%20about%20this%20project....html", "postSourceUrl": "https://github.com/Miikka11213/miikka.github.io/issues/2", "commentNum": 0, "wordCount": 570, "description": "To begin with, this is a blog frame called Gmeek written by Meekdai you can create a repository and directly deploy it by clicking [here](https://github.com/Meekdai/Gmeek). I just wanted to include that here also to mark an interesting start to my written articles in the future.\r\n\r\nTo visit my own original webpage, redirect by clicking [miikkaarchive.com](https://miikkaarchive.com/), I am still learning HTML and thinking what I can add into this page, I also need to come up with a solution to make a portfolio for my photography works, but it will take some time.\r\n\u3002", "top": 1, "createdAt": 1718858735, "style": "", "script": "", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/91852814?v=4", "createdDate": "2024-06-20", "dateLabelColor": "#bc4c00"}, "P6": {"htmlDir": "docs/post/Time Complexity Analysis of Algorithms.html", "labels": ["notes"], "postTitle": "Time Complexity Analysis of Algorithms", "postUrl": "post/Time%20Complexity%20Analysis%20of%20Algorithms.html", "postSourceUrl": "https://github.com/Miikka11213/miikka.github.io/issues/6", "commentNum": 0, "wordCount": 3479, "description": "\n# Time Complexity Analysis of Algorithms\n\nThis document explains the time complexities of common algorithms along with example code snippets for each.\n\n---\n\n## 1. **Insertion Sort**\n- **Best Case**: \\( O(n) \\) (Array is already sorted)\n- **Average Case**: \\( O(n^2) \\)\n- **Worst Case**: \\( O(n^2) \\) (Array is sorted in reverse order)\n\n### Code Example:\n```c\nvoid insertionSort(int array[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = array[i];\n        int j = i - 1;\n        while (j >= 0 && array[j] > key) {\n            array[j + 1] = array[j];\n            j--;\n        }\n        array[j + 1] = key;\n    }\n}\n```\n\n---\n\n## 2. **Bubble Sort**\n- **Best Case**: \\( O(n) \\) (Array is already sorted)\n- **Average Case**: \\( O(n^2) \\)\n- **Worst Case**: \\( O(n^2) \\) (Array is sorted in reverse order)\n\n### Code Example:\n```c\nvoid bubbleSort(int array[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                int temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n}\n```\n\n---\n\n## 3. **Merge Sort**\n- **Best Case**: \\( O(n \\log n) \\)\n- **Average Case**: \\( O(n \\log n) \\)\n- **Worst Case**: \\( O(n \\log n) \\)\n\n### Code Example:\n```c\nvoid merge(int array[], int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n    int L[n1], R[n2];\n\n    for (int i = 0; i < n1; i++)\n        L[i] = array[left + i];\n    for (int i = 0; i < n2; i++)\n        R[i] = array[mid + 1 + i];\n\n    int i = 0, j = 0, k = left;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) array[k++] = L[i++];\n        else array[k++] = R[j++];\n    }\n\n    while (i < n1) array[k++] = L[i++];\n    while (j < n2) array[k++] = R[j++];\n}\n\nvoid mergeSort(int array[], int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n        mergeSort(array, left, mid);\n        mergeSort(array, mid + 1, right);\n        merge(array, left, mid, right);\n    }\n}\n```\n\n---\n\n## 4. **Binary Search**\n- **Best Case**: \\( O(1) \\) (Target found at the middle)\n- **Average Case**: \\( O(\\log n) \\)\n- **Worst Case**: \\( O(\\log n) \\)\n\n### Code Example:\n```c\nint binarySearch(int array[], int n, int target) {\n    int left = 0, right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (array[mid] == target) return mid;\n        else if (array[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n```\n\n---\n\n## 5. **Linear Search**\n- **Best Case**: \\( O(1) \\) (Target is the first element)\n- **Average Case**: \\( O(n) \\)\n- **Worst Case**: \\( O(n) \\) (Target is not in the array or at the end)\n\n### Code Example:\n```c\nint linearSearch(int array[], int n, int target) {\n    for (int i = 0; i < n; i++) {\n        if (array[i] == target) return i;\n    }\n    return -1;\n}\n```\n\n---\n\n## Summary of Time Complexities\n\n| Algorithm              | Best Case  | Average Case | Worst Case   |\n|------------------------|------------|--------------|--------------|\n| **Insertion Sort**     | \\( O(n) \\) | \\( O(n^2) \\) | \\( O(n^2) \\) |\n| **Bubble Sort**        | \\( O(n) \\) | \\( O(n^2) \\) | \\( O(n^2) \\) |\n| **Merge Sort**         | \\( O(n \\log n) \\) | \\( O(n \\log n) \\) | \\( O(n \\log n) \\) |\n| **Binary Search**      | \\( O(1) \\) | \\( O(\\log n) \\) | \\( O(\\log n) \\) |\n| **Linear Search**      | \\( O(1) \\) | \\( O(n) \\) | \\( O(n) \\) |\n\u3002", "top": 0, "createdAt": 1737676402, "style": "", "script": "", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/91852814?v=4", "createdDate": "2025-01-24", "dateLabelColor": "#0969da"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "notes": "#F9D0C4", "philosophy": "#AEDC32", "testing": "#1d76db"}, "displayTitle": "Miikka's Blog", "faviconUrl": "https://avatars.githubusercontent.com/u/91852814?v=4", "ogImage": "https://avatars.githubusercontent.com/u/91852814?v=4", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://Miikka11213.github.io/miikka.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}